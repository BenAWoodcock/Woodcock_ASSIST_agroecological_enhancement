intercept <- estimates["(Intercept)"]
slope <- estimates["Yeild_Tonnes_ha_quadrat_extrapolated"]
#corrected yield (tonnes ha-1 based on cropped area) based on this correlation.
# This adjusts the underestimated quadrat based yield to be in line with that of the precision agriculture measures of
# average field yield per ha.   Quadrat based yield underestimates precision yield a bit.
# This yield is the basis for the econoimc assessments.
data_field_mean_T1to3$Yield<-  (data_field_mean_T1to3$Yeild_Tonnes_ha_quadrat_extrapolated*slope)+intercept
#  However, another yield corrected for the total area of the field can be derived (Yield_absolute tonnes ha, based
# on the total field area), i.e. not just for the cropped area of which 'Yield' is based on.  This measure can be used to
# infer whether the use of management practices in T2 and T3 (field margins, infield strips.
# cover crops and manure) increase the total productivity of the land per unit area of
# whole fields.  By definition this measure of yield would be identical to that of 'Yield'
#  for T1 (where no land is taken out of production) but lower than 'Yield' in T2 and T3
# where land is allocated to the non-cropped areas.
data_field_mean_T1to3$Yield_absolute<- (data_field_mean_T1to3$Yield * data_field_mean_T1to3$cropped_area_ha)  /
data_field_mean_T1to3$Field_total_Area_ha
################################################################################################################
# Precision Agriculture harvested yield (subset of fields and sites with this data)
#filter overall data set for sites that have precision ag yields for all three fields at a site for a given year
Precision_ag_data_whole_site_only <- data_field_mean_T1to3 %>% filter(Precision_Ag_whole_site == 1)
# In general what is the trend of precision yield with the treatments
Prec_yield_treat_response<-lmer(PrecAg_yield_t_ha ~
Treat +
Year_since_est+
Crop +
Treat*Crop+
Treat*Year_since_est +
Crop*Year_since_est +
Year_since_est*Treat*Crop +
(1|Site/Year_since_est), data=Precision_ag_data_whole_site_only,  na.action = "na.fail", REML = FALSE)
#....................................................
# deletion of least sig effects
Prec_yield_treat_response_m2<-lmer(PrecAg_yield_t_ha ~
Treat +
Crop +
(1|Site/Year_since_est), data=Precision_ag_data_whole_site_only,  na.action = "na.fail")
drop1(Prec_yield_treat_response_m2,test="F",sumFun=KRSumFun)
#DHARMAa
simulationOutput<-simulateResiduals(fittedModel=Prec_yield_treat_response_m2, plot=F)
plot(simulationOutput)   # meets model assumptions
summary(Prec_yield_treat_response_m2)
###########################################################################################
# Yield (tonnes ha)  -  average for cropped area
#  This is the yield is derived for the cropped area.
# Note this is a derived measure using a combination of quadrat based yield estimates, and the
# relationship between precision agric yield measure and quadrat yield acting as a correction
#  This is shown to be highly correlated (R2=0.58 with precision ag reported field yields)
# see above for derivation
yield<-lmer(Yield ~
Treat +
Year_since_est+
Crop +
Treat*Crop +
Treat*Year_since_est +
Crop*Year_since_est +
Year_since_est*Treat*Crop +
(1|Site/Year_since_est), data=data_field_mean_T1to3,  na.action = "na.fail", REML = FALSE)
#min adeq model
yield<-lmer(Yield ~
Treat +
Year_since_est+
Crop +
(1|Site/Year_since_est), data=data_field_mean_T1to3,  na.action = "na.fail", REML = FALSE)
drop1(yield,test="F",sumFun=KRSumFun)
simulationOutput<-simulateResiduals(fittedModel=yield, plot=F)
plot(simulationOutput) # model meets assumptions
summary(yield)
ggplot(data=data_field_mean_T1to3, aes(y=SMD_Yield_Tonnes_ha_corrected, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = "Management system",                                           # X-axis legend
y = "Yield (SMD Tonnes / ha.)",                                        # Y-axis legend
fill = "Treatment"                                    # Legend title
)  +
theme(
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 12),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
Winter_Crop <- data_field_mean_T1to3 %>% filter(Crop_Type == "Winter")
View(data_field_mean_T1to3)
Winter_Crop <- data_field_mean_T1to3 %>% filter(Crop_Type == "Winter")
MArgin_parasitoids_no_outlier_EH_T1_2019 <- data_field_mean_T1to3[!is.na(data_field_mean_T1to3$Parasitoid_N_margin_m2), ]   #  exclude missing value linked with outlier
m1<-lmer(log(1+Parasitoid_N_margin_m2)
~
Treat +
Year_since_est+
(1|Site/Year_since_est), data=MArgin_parasitoids_no_outlier_EH_T1_2019,  na.action = "na.fail", REML = FALSE)
drop1(m1,test="F",sumFun=KRSumFun)
summary(m1)
simulationOutput<-simulateResiduals(fittedModel=m1, plot=F)
plot(simulationOutput)# some problems
ggplot(data=data_field_mean_T1to3 , aes(y=Parasitoid_N_margin_m2, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Density"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
Winter_Crop <- data_field_mean_T1to3 %>% filter(Crop_type == "Winter")
m1<-lmer(log(blackgrass_ave+1)	 ~
1+
(1|Site/Year_since_est), data=Winter_Crop,  na.action = "na.fail", REML = FALSE)
drop1(m1,test="F",sumFun=KRSumFun)
summary(m1)
simulationOutput<-simulateResiduals(fittedModel=m1, plot=F)
plot(simulationOutput) # some problems
ggplot(data=Winter_Crop , aes(y=blackgrass_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=Winter_Crop , aes(y=blackgrass_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=Winter_Crop , aes(y=blackgrass_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=Winter_Crop , aes(y=log(blackgrass_ave+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=Winter_Crop , aes(y=log(blackgrass_ave+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=Winter_Crop , aes(y=log(blackgrass_ave+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts ln (N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=Winter_Crop , aes(y=lackgrass_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts ln (N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=Winter_Crop , aes(y=blackgrass_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Tiller counts"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Weeds_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Weeds_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Aphids_hand_search, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=log(Aphids_hand_search), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=log(Aphids_hand_search), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
m1<-lmer( log(1+Aphids_hand_search)~
Year_since_est+Treat +
(1|Site/Year_since_est), data=data_field_mean_T1to3,  na.action = "na.fail", REML = FALSE)
drop1(m1,test="F",sumFun=KRSumFun)
summary(m1)
simulationOutput<-simulateResiduals(fittedModel=m1, plot=F)
plot(simulationOutput)  #  some problems
# The Tweedie distribution is useful when your data are continuous and overdispersed, with support for both continuous (positive) and discrete components.
model_tweedie1 <- glmmTMB(Aphids_hand_search
~  Treat +
Year_since_est+
Treat*Year_since_est +
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie2, plot=F)
model_tweedie2
model_tweedie2 <- glmmTMB(Aphids_hand_search
~  Treat +
Year_since_est+
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie2, plot=F)
plot(simulationOutput) #
anova(model_tweedie1, model_tweedie2, test = "Chisq")
model_tweedie3 <- glmmTMB(Aphids_hand_search
~  Treat +
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie3, plot=F)
plot(simulationOutput) # some over dispersion issues
# Likelihood ratio test
anova(model_tweedie2, model_tweedie3, test = "Chisq")
summary(model_tweedie3)
model_tweedie4 <- glmmTMB(Aphids_hand_search
~
Year_since_est+
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie4, plot=F)
plot(simulationOutput) #  model is better but has problems
# Likelihood ratio test
anova(model_tweedie2, model_tweedie4, test = "Chisq")
ggplot(data=data_field_mean_T1to3 , aes(y=log(Aphids_hand_search+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Aphids_hand_search, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=log(Aphids_hand_search), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=(1000*Slug_biomass), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=ln(Slug_biomass), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=ln(Slug_biomass+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=log(Slug_biomass+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Slug_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Slug_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.2))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
