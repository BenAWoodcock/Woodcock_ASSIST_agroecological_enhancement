theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
m1<-lmer( log(1+Aphids_hand_search)~
Year_since_est+Treat +
(1|Site/Year_since_est), data=data_field_mean_T1to3,  na.action = "na.fail", REML = FALSE)
drop1(m1,test="F",sumFun=KRSumFun)
summary(m1)
simulationOutput<-simulateResiduals(fittedModel=m1, plot=F)
plot(simulationOutput)  #  some problems
# The Tweedie distribution is useful when your data are continuous and overdispersed, with support for both continuous (positive) and discrete components.
model_tweedie1 <- glmmTMB(Aphids_hand_search
~  Treat +
Year_since_est+
Treat*Year_since_est +
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie2, plot=F)
model_tweedie2
model_tweedie2 <- glmmTMB(Aphids_hand_search
~  Treat +
Year_since_est+
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie2, plot=F)
plot(simulationOutput) #
anova(model_tweedie1, model_tweedie2, test = "Chisq")
model_tweedie3 <- glmmTMB(Aphids_hand_search
~  Treat +
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie3, plot=F)
plot(simulationOutput) # some over dispersion issues
# Likelihood ratio test
anova(model_tweedie2, model_tweedie3, test = "Chisq")
summary(model_tweedie3)
model_tweedie4 <- glmmTMB(Aphids_hand_search
~
Year_since_est+
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = data_field_mean_T1to3)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie4, plot=F)
plot(simulationOutput) #  model is better but has problems
# Likelihood ratio test
anova(model_tweedie2, model_tweedie4, test = "Chisq")
ggplot(data=data_field_mean_T1to3 , aes(y=log(Aphids_hand_search+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Aphids_hand_search, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=log(Aphids_hand_search), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Abundance ln(N+1)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=(1000*Slug_biomass), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=ln(Slug_biomass), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=ln(Slug_biomass+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=log(Slug_biomass+1), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (mg)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Slug_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
# coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Slug_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.2))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=log(1+Parasitoid_N_margin_m2), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Density"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
library(ggplot)
library(ggplot2)
library(lme4)
library(pbkrtest)
library(glmmTMB) # for neg bin models
library(ggplot2)
library(DHARMa)
library(emmeans)
library(MASS)
library(ape)
library(lmerTest)
library(fmsb)
library(nlme)
library(tidyverse)
library(bestNormalize)
library(dplyr)
library(car)
MArgin_parasitoids_no_outlier_EH_T1_2019 <- data_field_mean_T1to3[!is.na(data_field_mean_T1to3$Parasitoid_N_margin_m2), ]   #  exclude missing value linked with outlier
ggplot(data=MArgin_parasitoids_no_outlier_EH_T1_2019  , aes(y=log(1+Parasitoid_N_margin_m2), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Density"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=MArgin_parasitoids_no_outlier_EH_T1_2019  , aes(y=log(1+Parasitoid_N_margin_m2), x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Density"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=MArgin_parasitoids_no_outlier_EH_T1_2019  , aes(y=Parasitoid_N_margin_m2, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Density"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=MArgin_parasitoids_no_outlier_EH_T1_2019  , aes(y=Parasitoid_N_margin_m2, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Density"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=MArgin_parasitoids_no_outlier_EH_T1_2019  , aes(y=Parasitoid_N_margin_m2, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.2))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Density"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=soil, aes(y=(1000*Soil_C_orgnaic_gcm3) , x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
#coord_cartesian(ylim = c(0, 0.13))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Soil Carbon (mg.cm^3)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Weeds_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 1))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Weeds_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 1.2))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Weeds_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 1))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Weeds_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 2))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Weeds_ave, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.8))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Plant count"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Slug_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 5))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.2))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
ggplot(data=data_field_mean_T1to3 , aes(y=Snail_biomass, x=Treat, fill=Treat)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "grey") +
coord_cartesian(ylim = c(0, 0.3))  +# Adjusts view without removing data
geom_boxplot(outlier.shape = NA) +  # Avoid duplicate outliers
theme_bw()+   #  white background
labs(
x = NULL  ,                                     # X-axis legend
y = "Mass (g)"                                        # Y-axis legend
)  +
theme(legend.position = "none",
panel.border = element_rect(color = "black", fill = NA),   # Solid axes lines
axis.text = element_text(size = 16),                      # Adjust axis text size
axis.title = element_text(size = 16)                      # Adjust axis title size
)
m_OSR<-lmer(Yield_from_poll ~
Treat +
(1|Site/Year_since_est), data=OSR,  na.action = "na.fail", REML = FALSE)
drop1(m_OSR,test="F",sumFun=KRSumFun)
summary(m_OSR)
simulationOutput<-simulateResiduals(fittedModel=m_OSR, plot=F)
plot(simulationOutput)
MArgin_parasitoids_no_outlier_EH_T1_2019 <- data_field_mean_T1to3[!is.na(data_field_mean_T1to3$Parasitoid_N_margin_m2), ]   #  exclude missing value linked with outlier
m1<-lmer(log(1+Parasitoid_N_margin_m2)
~
Treat +
Year_since_est+
(1|Site/Year_since_est), data=MArgin_parasitoids_no_outlier_EH_T1_2019,  na.action = "na.fail", REML = FALSE)
drop1(m1,test="F",sumFun=KRSumFun)
summary(m1)
simulationOutput<-simulateResiduals(fittedModel=m1, plot=F)
plot(simulationOutput)# some problems
# The Tweedie distribution is useful when your data are continuous and overdispersed, with support for both continuous (positive) and discrete components.
model_tweedie1 <- glmmTMB(Parasitoid_N_margin_m2
~  Treat +
Year_since_est+
Treat*Year_since_est +
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = MArgin_parasitoids_no_outlier_EH_T1_2019)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie2, plot=F)
plot(simulationOutput) #
model_tweedie2 <- glmmTMB(Parasitoid_N_margin_m2
~  Treat +
Year_since_est+
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = MArgin_parasitoids_no_outlier_EH_T1_2019)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie2, plot=F)
plot(simulationOutput) #
# Likelihood ratio test
anova(model_tweedie1, model_tweedie2, test = "Chisq")
# ns
model_tweedie3 <- glmmTMB(Parasitoid_N_margin_m2
~  Treat +
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = MArgin_parasitoids_no_outlier_EH_T1_2019)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie3, plot=F)
plot(simulationOutput) # looks fine
summary(model_tweedie3 )
# Likelihood ratio test
anova(model_tweedie2, model_tweedie3, test = "Chisq")
#ns
model_tweedie4 <- glmmTMB(Parasitoid_N_margin_m2
~
Year_since_est+
(1|Site/Year_since_est),                # Mean structure
tweedie(link = "log"), # Tweedie family with log link
data = MArgin_parasitoids_no_outlier_EH_T1_2019)
simulationOutput<-simulateResiduals(fittedModel=model_tweedie4, plot=F)
plot(simulationOutput) #
# Likelihood ratio test
anova(model_tweedie2, model_tweedie4, test = "Chisq")
# sig
